<?php

namespace src\Utils\Generators;

class Uuid
{
    /**
     * -- This script is moved here from clicompatbase
     *
     * Create a "universal unique" replication "identifier"
     */
    public static function create()
    {
        $uuid = mb_strtoupper(md5(uniqid(rand(), true)));

        // split into XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
        // (type VARCHAR 36, case insensitiv)
        $uuid = mb_substr($uuid, 0, 8) . '-' . mb_substr($uuid, -24);
        $uuid = mb_substr($uuid, 0, 13) . '-' . mb_substr($uuid, -20);
        $uuid = mb_substr($uuid, 0, 18) . '-' . mb_substr($uuid, -16);
        $uuid = mb_substr($uuid, 0, 23) . '-' . mb_substr($uuid, -12);

        return $uuid;
    }

    /**
     * Returns the sql chunk which generates uppercase unique UUID
     * in format XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     * It can be used for example as:
     * UPDATE table SET uuidColum = Uuid::sqlUppercaseUuid()
     */
    public static function getSqlForUpperCaseUuid()
    {
        // md5 because uuid() returns "similar" results if generates in really short time - with md5 uuids are much different
        return "(SELECT CONCAT(SUBSTR(( @_u:= UPPER( md5( UUID() ) ) ),1,8),'-',SUBSTR(@_u,9,4),'-',SUBSTR(@_u,13,4),'-',SUBSTR(@_u,17,4),'-',SUBSTR(@_u,21,12)))";
    }

    /**
     * @param $str
     * @return true, if the string is a formally valid UUID, as generated by create()
     */
    public static function isValidUpperCaseUuid($str)
    {
        return preg_match('/^[A-Z0-9]{8}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{12}$/', $str);
    }

    /**
     *
     * @param string $str
     * @return true if this is valids lower|upper case UUID
     */
    public static function isValidUuid($str)
    {
        return self::isValidUpperCaseUuid($str) || self::isValidLowerCaseUuid($str);
    }

    /**
     * @param $str
     * @return true, if the string is a formally valid UUID, as generated by create()
     */
    public static function isValidLowerCaseUuid($str)
    {
        return preg_match('/^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$/', $str);
    }

    /**
     * @return string - mask for UUIDs, with ? representing a hex digit
     */
    public static function getMask()
    {
        return '????????-????-????-????-????????????';
    }
}
